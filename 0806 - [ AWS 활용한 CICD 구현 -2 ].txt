[ AWS 활용한 CICD 구현 -2 ]
- GitHub, CodeBuild, CodeDeploy, CodePipeline을 활용한 CI/CD
- GitHub에 코드를 푸시하면 CodePipeline이 이를 감지하고 CodeBuild를 실행시켜 빌드를 함.
  CodeDeploy가 EC2상의 Agent를 실행시켜 변경된 내용을 배포.

1. GitHub에 로그인을 하고 저장소(Repository)를 생성
- Repository name : CodePipeline-sample-repo
- Description : AWS Codepipeline Sample Repository
나머지는 기본값으로 두고 [create repository]를 클릭

2. 컴퓨터(윈도우)에 로컬 저장소 ExProject 폴더를 생성하고 메모장으로 README.md 파일을 하나 생성하고 적당한 내용을 입력하고, 이제 git bash를 통해 초기화를 진행.
(예: D:\ExProject)
git init
git add .
git commit -m "first commit"
git branch -M main
git config --global user.email "chienttao@gmail.com"
git config --global user.name "jinsim2"
git remote add origin https://github.com/jinsim2/CodePipeline-sample-repo.git
git push -u origin main

3. CodeBuild 페이지로 이동 -> 프로젝트 생성
- 프로젝트 이름 : codepipeline-build-sample
- 리포지토리 : ◉ OAuth를 사용하여 연결 -> GitHub에 연결 클릭
- GitHub 리포지토리 : https://github.com/jinsim2/CodePipeline-sample-repo.git
- 연결 상태 : OAuth를 사용하여 GitHub에 연결되었습니다
- 환경 : ◉ 관리형 이미지
- 운영체제 : Amazon Linux
- 런타임 : Standard
- 이미지 : aws/codebuild/amaonzlinux2-x86_64-standard:5.0
- 이미지 버전 : 이 런타임 버전에 항상 최신 이미지 사용
- 서비스 역할 : ◉ 새 서비스 역할
- 역할 이름 : codepipeline-build-sample-service-role
- 빌드 사양 : ◉ buildspec 파일 사용
그 외에는 기본값으로 두고 [빌드 프로젝트 생성] 버튼 클릭

4. 프로젝트 폴더(로컬 저장소)로 이동하여 buildspec.yml을 생성
==========================
version: 0.2

phases:
  install:
    runtime-versions:
      java: corretto11
    commands:
      - echo Installing Maven
      - yum install -y maven
  pre_build:
    commands:
      - echo Build started on `date`
      - mvn clean install
  build:
    commands:
      - echo Packaging application
      - mv target/controller-1.0.0-BUILD-SNAPSHOT.war myapp.war
  post_build:
    commands:
      - echo Build completed on `date`
artifacts:
  files:
    - myapp.war
    - appspec.yml
    - scripts/*
======================
=> install 단계에서 CodeBuild가 java11을 사용할 수 있도록 환경 설정
=> pre_build 단계에서 mvn clean install 명령어를 사용하여 WAR 파일을 생성
WAR파일의 이름은 pom.xml 파일에 정의된 설정값에 따라 정해짐
기본적으로 생성되는 WAR 파일의 이름 형식은 <artifactId>-<version>.war
=> mvn clean package 명령어를 실행하면 target/ 디렉터리에 controller-1.0.0-BUILD-SNAPSHOP.war 파일이 생겨남
=> 만약, 특정 이름의 WAR파일을 원한다면 pom.xml 파일에
<build>
    <fileName> 원하는 WAR파일명 </fileName>
</build>

5. codedeploy가 사용할 appspec.yml 파일을 생성, 마찬가지로 로컬저장소 ExProject 폴더 내에 위치
=====================================================
version: 0.0
os: linux
files:
  - source: myapp.war
    destination: /usr/local/tomcat/webapps
hooks:
  BeforeInstall:
    - location: scripts/stop_tomcat.sh
      timeout: 300
      runas: root
  AfterInstall:
    - location: scripts/start_tomcat.sh
      timeout: 300
      runas: root
==================================================

6. 로컬저장소(ExProject) 폴더 내에 scripts 라는 이름의 새폴더 생성 stop_tomcat.sh와 start_tomcat.sh 스크립트 파일을 생성(공유폴더 파일 붙여넣기)

7. git bash 창에서 스크립트 파일에 실행권한(x)을 추가
chmod +x scripts/start_tomcat.sh
chmod +x scripts/stop_tomcat.sh

8. main 브랜치에 buildspec.yml, appspec.yml, scripts/start_tomcat.sh, scripts/stop_tomcat.sh를 git add . -> git commit -m "add buildspec.yml appspec.yml script files" -> git push origin main

9. 


